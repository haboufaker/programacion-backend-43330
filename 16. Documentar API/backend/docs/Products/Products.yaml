paths:
  /api/products/mockingproducts:
    get:
      summary: Get all mocking products
      tags:
        - Products
      responses:
        json:
          description: Mocking products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
  /api/products/mockingproducts/deleteAll:
    get:
      summary: Delete all mocking products
      tags:
        - Products
      responses:
        json:
          description: Deletes all Mocking products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
  /api/products/:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        201:
          description: Products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
  /api/products/{pid}:
    get:
      summary: Returns products by id
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        201:
          description: Returns product by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
    post:
      summary: Adds a Product
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
       required: true
       content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/requestBodies/newProduct'
      responses:
        201:
          description: Product added
        400:
          description: Could not add product
        500:
          description: Internal server error
    put:
      summary: Updates a Product
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
       required: true
       content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/requestBodies/updateProduct'
      responses:
        201:
          description: Product updated
        409:
          description: Can't update object property, make sure the property exists, you are not trying to modify the product code with an existing one for another product or you are not trying to modify the object's ID
        500:
          description: Internal server error
    delete:
      summary: Deletes a Product
      tags:
        - Products
      parameters:
        - in: path
          name: pid
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        201:
          description: Product deleted
        403:
          description: Permission denied
        404:
          description: Not found
        500:
          description: Internal server error

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: product ID (generated by MongoDB)
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        code:
          type: string
          unique: true
          description: Product code, unique value
        stock:
          type: number
          description: Product stock
        thumbnail:
          type: array
          items:
            type: string
          default: []
          description: Array of images, empty by default
        category:
          type: string
          description: Product category
        availability:
          type: boolean
          default: true
          description: Product availability, true by default
        owner:
          type: String,
          default: "admin"
          description: Product Owner, admin by default
      example:
        id: ObjectId("5f9b2b3b9c4c9b1b2c9b1b2c")
        title: "Product 1"
        description: "This is Product 1"
        price: 83
        code: "ABC123"
        stock: 3
        thumbnail: ["product1.png", "product11.png"]
        category: "Prototype"
        availability: true
        owner: "admin"
  requestBodies:
    newProduct:
      type: object
      properties:
        _id:
          type: ObjectId
          description: product ID (generated by MongoDB)
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        code:
          type: string
          unique: true
          description: Product code, unique value
        stock:
          type: number
          description: Product stock
        thumbnail:
          type: array
          default: []
          description: Array of images, empty by default
        category:
          type: string
          description: Product category
        availability:
          type: boolean
          default: true
          description: Product availability, true by default
          owner:
            type: String,
            default: "admin"
            description: Product Owner, admin by default
    updateProduct:
      type: object
      properties:
        _id:
          type: ObjectId
          description: product ID (generated by MongoDB)
        title:
          type: string
          description: Product title
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        code:
          type: string
          unique: true
          description: Product code, unique value
        stock:
          type: number
          description: Product stock
        thumbnail:
          type: array
          default: []
          description: Array of images, empty by default
        category:
          type: string
          description: Product category
        availability:
          type: boolean
          default: true
          description: Product availability, true by default
          owner:
            type: String,
            default: "admin"
            description: Product Owner, admin by default

